import numpy as np

PERIODS = np.array([0.01, 0.07, 0.09, 0.11, 0.14, 0.18, 0.22, 0.27, 0.34, 0.42, 0.53, 0.65, 0.81, 1.01, 1.25, 1.56, 1.92, 2.44, 3.03, 3.7, 4.55, 5.88, 7.14, 9.09])

c1 = [-0.00219, -0.00236, -0.00244, -0.00245, -0.0024 -0.00235, -0.00235, -0.00233, -0.00231, -0.00224, -0.00213, -0.002, -0.00183, -0.00158, -0.00133, -0.00112, -0.00086, -0.00059, -0.00039, -0.00023, -0.00005, 0, 0, 0]

c2 = [-0.00298, -0.00329, -0.00346, -0.00356, -0.00357, -0.00358, -0.00355, -0.00346, -0.00333, -0.00315, -0.0029 -0.00262, -0.00234, -0.00205, -0.00177, -0.00152, -0.00125, -0.00097, -0.00075, -0.00057, -0.0004 -0.00027, -0.00019, -0.00019]

c3 = [-0.219, -0.046, 0.027,  0.01, -0.082, -0.18,  -0.289, -0.386, -0.438, -0.52,  -0.606, -0.672, -0.705, -0.69,  -0.646, -0.578, -0.518, -0.513, -0.554, -0.574, -0.561, -0.491, -0.462, -0.413]

a = [2.8193, 3.1807, 3.3592, 3.4483,  3.5005,  3.4463,  3.3178,  3.2008,  3.0371,  2.7958,  2.5332,  2.3234,  2.1321,  1.9852,  1.8442,  1.6301,  1.4124,  1.1154,  0.7965,  0.5093,  0.2578,  -0.1469, -0.5012, -1.093]

b = [0.1908, 0.1759, 0.17, 0.1669,  0.1604,  0.165, 0.1763, 0.1839,  0.197,   0.2154,  0.2331,  0.2435,  0.2522,  0.2561,  0.2599,  0.273,   0.2851,  0.3015,  0.3197,  0.3361,  0.3497,  0.3835,  0.4119,  0.4641]

Dcascadia = [-0.301, -0.357, -0.357, -0.319, -0.272, -0.237, -0.183, -0.114, -0.046, 0.002, 0.007, 0.011, 0.014, 0.021, 0.089, 0.139, 0.174, 0.129, 0.079, 0.044, 0.013, 0, 0, 0]

PHI = [0.284,   0.313,   0.326,   0.329,   0.324,   0.312,   0.31,    0.312,   0.307,   0.295,   0.276,   0.257,   0.249,   0.249,   0.261,   0.274,   0.285,   0.275,   0.264,   0.252,   0.237,   0.218,   0.201,   0.175]

TAU = [0.196,    0.215,   0.22,    0.218,   0.212,   0.206,   0.202,   0.199,   0.191,   0.171,   0.155,   0.147,   0.131,   0.115,   0.11,    0.113,   0.121,   0.132,   0.137,   0.138,   0.147,   0.151,   0.148,   0.155]

def computeSpectra(mag, r, faba, vs30, cascadia, epistemic, per):
    F = 1 - faba
    B = faba
    pIdx = np.nonzero(PERIODS == per)[0][0]
    c0 = a[pIdx] + b[pIdx] * mag
    reff = np.sqrt(r**2 + 60**2)
    logSa = c0 - np.log10(reff) + c1[pIdx] * F * r + c2[pIdx] * B * r + c3[pIdx] * np.log10(vs30/760)

    if cascadia == 1:
        logSa += Dcascadia[pIdx]

    if epistemic == 1:
        correction = np.min([0.15 + 0.0007*r , 0.35])
        logSa += correction
    if epistemic == -1:
        correction = -1 * np.min([0.15 + 0.0007*r , 0.35])
        logSa += correction
    return logSa

def interEventSigma(periods):
    tau = [np.interp(np.log10(per) , np.log10(PERIODS) , TAU) for per in periods]
    return tau

def intraEventSigma(periods):
    phi = [np.interp(np.log10(per) , np.log10(PERIODS) , PHI) for per in periods]
    return phi
